/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.infinitic.loadTester.launcher

import io.infinitic.clients.InfiniticClient
import io.infinitic.config.ClientConfig
import io.infinitic.config.loaders.loadConfigFromFile
import io.infinitic.loadTester.config.LauncherConfig
import io.infinitic.loadTester.config.Shape
import io.infinitic.loadTester.engine.PrometheusRegistry
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import org.apache.pulsar.client.admin.PulsarAdmin
import org.apache.pulsar.client.api.PulsarClient
import org.apache.pulsar.client.impl.auth.oauth2.AuthenticationFactoryOAuth2
import java.net.URL

class Launcher(
    private val client: InfiniticClient,
    private val config: LauncherConfig
    ) {
    companion object {
        @JvmStatic
        fun fromConfigFile(file: String): Launcher {
            val issuerUrl = "https://auth.streamnative.cloud"
            val credentialsUrl = "file:///Users/gilles/.sncloud/zenaton-gilles.json"
            val audience = "urn:sn:pulsar:zenaton:hackathon"
            val pulsarClient = PulsarClient.builder()
                .serviceUrl("pulsar+ssl://hackathon.zenaton.snio.cloud:6651")
                .authentication(
                    AuthenticationFactoryOAuth2.clientCredentials(URL(issuerUrl), URL(credentialsUrl), audience)
                )
                .build()

            val clientConfig = loadConfigFromFile<ClientConfig>(listOf(file))

            val client = io.infinitic.pulsar.InfiniticClient.from(pulsarClient, clientConfig)

            val config = loadConfigFromFile<LauncherConfig>(listOf(file))

            return Launcher(client, config)
        }
    }

    fun start() = runBlocking {

        var startMillis = 0L
        var startIndex = 0

        config.scenario.launches.forEach {
            val increment: Long = it.duration.toMillis() / it.number

            when(it.shape) {
                Shape.flat -> {
                    repeat(it.number) { index ->
                        val delay = startMillis + index * increment
                        val i = startIndex + index
                        launch {
                            delay(delay)
                            dispatch(i)
                            println(i)
                        }
                    }
                }
            }
            startMillis += it.duration.toMillis()
            startIndex += it.number
        }
    }

    private fun dispatch(index: Int) {
        val w = client.newWorkflow(config.scenario.klass)
        client.async(w) { handle("$index") }
        PrometheusRegistry.registry.counter("workflow_launch").increment()
    }
}
